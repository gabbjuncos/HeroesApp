history -c command

git config --global user.name "Tu nombre"
git config --global user.email "Tu correo"

para cerrar sesion
git config --global --unset user.email "colocar email"

git config --global --list

ir a la carpeta donde esta el .json con los datos para levantar el server local

json-server --watch db.json

___________________________

lazyload - carga peresoza
y ser capaces de manjar rutas hijas cargadas con lazyload

ng new heroesApp

estricto para que muestre todos los posibles errores

y rooting darle que no 

material.angular.io

guides
started

para installar ng add @angular/material
cuando se instala se puede elegit el tema

y va preguntando valores de configuracion para instalar las cosas de manera global

sino se le agrega el --skip-confirmation
para no elegir nada 

_________________

SE GENERA UN MODULO LLAMADO AUTH

ng g m auth

y crea una carpeta con el modulo

otro modulo llamado heroes

en auth se va adesarrollar una autenticacion sencilla para proteccion de rutas

ng g m heroes
donde tendremos la app de heroes despues de una autenticacion

otro modulo llamado 

ng g m material
para tener todo centralizado las importaciones de material ahi , todo lo que vayamos a usar de esa libreria
los importamos de ese modulo

y vamos a tner pages en auth y en heroes 
se agregan esas carpetas manualmente

generar componente login para auth

ng g c auth/pages/login --skipTests para crearlo sin el archivo de pruebas


y actualiza directamente en modulo de auth

tambien uno para la pagina register
ng g c auth/pages/register


en heroes se crea un componente para agregar heroes

ng g c heroes/pages/agregar

y otro para buscar, donde va hacer la busqueda con autocomplete

ng g c heroes/pages/buscar
otro para heroe que va  serviar para ver un heroe en particular
ng g c heroes/pages/heroe

y otro para home, que se va a usar como una pagina principal

ng g c heroes/pages/home

y otro mas para listado , para mostrar todos los heroes que tengamos en la base de datos

en el heroes module vo a tener todas las importanciones

pero no vamos a exportar estos componentes fuera de algun lugar
por ser una carga perezoza, no vamos a importar nada que no haga falta


se queire hacer una pagina de error para cuando la url no sea igual a alguna de las definidas

se crea la carpeta shared en app 
y ahi se va a crear el componente error

ng g c shared/errorPage

y este componente error se lo pasa al html del app para mostrar 

______________

el app component se debe mostrar de forma condicional dependiendo la ruta 

aveces la rutas principles se colocan al mismo nivel donde se encuentra el archivo module 
o se sabe crear una carpeta root 

para este ejemplo se va a crear a la misma altura del app moduel

ng g m appRouting --flat , para que no cree una carpeta el flat

solamente este archivo va a contener las rutas

y voy a poder usar los componentes porque estan de manera global en el app module

y con el 404 va aser para el error 

y para el ** que seria para cualqueir url que no corresponda a las definidas

si en el app module tuviera todas las paginas, no podria hacer le lazyload
porque estaria definiendo todas

en el aap routing module 
se importa el routerModule.forRoot (routes)
porque es para las rutas principales

y se exporta el routerModule

y hay que decirle al app module que dispone de ese moduelo en el imports
se agrega el app routing module

y se agrega la etiquea routerOutlet 
y le dice a angular que haga match con las rutas que se definieron y renderiza esos componentes

y en el path para el ** que redirja a la 404
con redirectTo

______________________________________

lazy load y rutas hijas AuthRoutes

se crea un module para las cargas peresozas al mismo nivel que el auth module

ng g m auth/authRouting --flat

en el archivo auth-routing voy a tener fragmento de las url

si no es login y no es registro , redirige a login

y ahi vamos a llamar a los componentes de las paginas con el que quiero hacer el lazyload

y en el ng module declaramos el routermodule.child
no se usa el for root , el for rooot es solo para la principal
y vamos a tener una sola por aplicacion 

son for child porque va a ser por carga peresoza

y se exporta el RouterModule 

con la configuracion de las rutas hijas

el auth router module va a ser parte del auth module

todo lo que conoce angular es lo que esta en app module
para que sea parte de la aplicacion

lo que se va a hacer es que cuando alguien ingrese a alguna ruta 
angular cargue esa ruta

y en el app routing module se definen las rutas
y para la ruta 'auth' se va a utilizar para 
colocar todo el modulo de autenticacion

para cuando se ingrese a la ruta 'auth'
se va a cargar el modulo con loadChildren usando una funcion de flecha
se dice que cargue el modulo que es auth.module y como es una promesa hay que resolver despues que
se hace, y seria que se cargue el respectivo modulo

m que estaria nombrando el modulo y se dice que cargue el AuthModule

seria cuando alguien entra al path auth, que se carguen sus hijos y esos hijos van a venir del
producto del auth.module y cuando se cargue, el modulo que va a regresar es el authmodule

y en el navegador se puede ver en network como se van cargando las url

_______________________

tarea 

https://gist.github.com/Klerith/c72ea2d4192567cb42a0f62e5d271724

crear modulo para routing heroes

ng g m heroes/heroesRouting --flat

SE HACE LO MISM PARA LOS PATH HEROES

se agregan los pat en heroes routing y se lo exporta

y luego se lo importa en el heroes module


ahora para terminar de configurar el lazy load

se le agrega al heroes routing el componente home luego del path ''
y antes del childre


en el app component html 
se tiene que poner 
<router-outlet> para que ande el lazy load

en resumen 

en general se crea un archivo app routing donde ahi van a estar la rutas principales
la de error 404
la **
y las rutas asociadas a al componente en general usando loadchilden

luego en cada ruta que contenga rutas hijas
se crear un archivo general con su modulo y luego un modulo routin con todoas sus rutas asocaiadas

app-routing.module(rutas principales)   - auth.module (general para las rutas de auth) - auth-routing-module (todas rutas para auth importando forChild) 
		   			- heroes.module (general para las rutas de heroes) - heroes.routing-module (todas las rutas para heroes importando forChild)

en el app.component.html va el router-oulet nomas para que funcione

_____________________

ANGULAR FLEX
- PARA QUE LA PANTALLA SE ADAPTE A LAS DISTINTAS RESOLUCIONES
- APP CON BUSCADOR CON AYUDA 

para installar angular flex

https://www.npmjs.com/package/@angular/flex-layout

recomienda usar angular flex para controlar como se ven las grilas
se tiene mas control de la forma como ve que angular material

componente grid list de angular

npm i @angular/flex-layout

solo en los heroes se va a usar 

asi que se va a importar en el modulo de heroes

y se importa flexlayoutModule

y se lo agrega a la lista importada

FlexLayoutModule

____________________

material sidenav, toolbar e iconos

sidenav angular material    FlexLayoutModule,

en api refernce se ve la importacion como usarlo

todo lo que sea de angular material lo voy a importar en material module

import {MatSidenavModule} from '@angular/material/sidenav';

y lo exporto para que cualquier otro componente lo pueda usar

y al module material lo importo en el heroes module en el import
de esta manera todo lo importado en el material module tambien va a ser parte del module de heroes

agregamos los componentes 

mat-drawer-container y mat-sidenav

y hay que importar el componente toolbar tambien al material module

import {MatToolbarModule} from '@angular/material/toolbar';

MatToolbarModule

y tengo que importar el material module en el moduelo de heroes module

para que sea parte de este modulo

se agrega un boton 
import {MatButtonModule} from '@angular/material/button';

y se agrega la propiedad mat-button

para usar el icon tengo que importar tambien el componente de mat en module

para ver los iconos que hay para usar de material

https://developers.google.com/fonts/docs/material_icons

https://fonts.google.com/icons

y nomas necesitamos el nombre del icono

luego de hacerle click al boton
hay que llamar a la funcion sidenav. y tiene muchos metodos y seria el toggle() para llamar 
para que se expanda el menu

PARA QUE SE OCULTE CUANDO SE HACE CLICK AFUERA

la etique a usar es el mat-sidenav-container

y para que se vea el efecto que el boton lo empuja se agrega mode="push"

el ancho del sidebar lo determina el contenido por defecto

ahora para agregar el listado de menus
en el material ver ese componente e importarlo en el module material

se usa el selector mat-nav-list
en el html home

mat-nav-list

y usa otro forma para hacer la redireccion de los links
no como se usa en el amaterial de ejemplo

usa link y en routerlink le pasa la url , se coloca ./listado porque ya 
estamos en la rutas de heroes

y se coloca el router-outlet antes que se cierre el contariner

y para que se vea mejor se le aplica el atributo mat-list-item para transformarlo en un list items
y queda con el efecto de material

se agrega el click (click)="sidenav.toggle()" en las opciones del menu para 
que se cierre cuando se hace click en la opcion del menu

luego se agrega todos las opciones del menu en el mat-nav-list

y se agrega el mat-icon para que tenga un icono

y al mat-icon se le puede agregar el selecctor mat-list-icon para que se acomode el pading
la separacion 

ahora se crea una clase container 
y se la asigna en un div para que el componente mostrado tenga un margen 

y se define la clase en el styles del home 

en el toolbar que tiene el boton de menu
se le agrega un boton y se le agrega la propiedad mat-button

para que el boton logout figure en la derecha se lo hace con flex

se agrega en el css la clase 
.spacer {
	flex: 1 1 auto;	
}

esto va hacer que el spacer tome todo el espacio que queda restante y que empuje todo a los bordes
se agre en la clase css general styles.css

y se agrega un span en el html home que va a tener solamente la clase spacer

inmediatamente arriba del boton logout

esa clase da el efecto que el boton se vaya a la derecha y el efecto de que se oculta cuando se hace 
click al menu

se agrega el span tambien para el boton dentro del menu
para que ese boton se vaya la derecha del ancho del toolbar del menu

despues de la palabra menu

____________
APLICACION DE CRUD
CREATE 
READ
UPDATE
DELETE

post
put
get
delete

usadas para aplicaciones en el front end 

para hacer un server json local para probar el backend

se unsa la libreria

npmjs.com/package/json-server

para installar en window  y abrir consola como administrador
npm install -g json-server se instala de manera global

los datos que vamos a usar

gist.github.com/Klerith/403c91e61d3c87284beb0dd138619958

hay que posicionarse en la carpeta donde este el json
y se ejecuta 
json-server --watch db.json
para levantar el servidor
con los datos del json


se necesita imagenes
en una carpeta llamada heroes poner todas las imagenes de heroes
y tener aparte una imagen para perfil no-image

y agregarlas a la carpeta assets del proyecto angular

________________________

HOROES SERVICE - TRAER INFORMACION DE LOS HEROES

hay que  centralizar las peticiones del backend hacia los heroes

en heroes se crea una carpeta services

y ahi vamos a tener el service que va a ser el encargado de hacer la peticiones al servidor

ng g s heroes/services/heroes

el archiv service significa que esa de manera gloabal
  providedIn: 'root' 

y  esta bien 

como necesito trabajr con peticiones http, tengo que importar el modulo y como el servicio va a estar
de manera globarl

se lo coloca de manera global en el app.module
porque los ervicios estan de manera global y necesitan ese servicio
e importamos el modulo HttpClientModule

import {HttpClientModule} from '@angular/common/http'

y lo colocamos en imports

y en el constructor del herores services de lo agrega, del tipo HttpClien
y lo importamos desde angular common http

se define el metodo get
que devuelve un obj del tipo observable

y se lo va a consumar en el componente listado de heroes
asi que se lo agrega en el constrcutor al obj del  tipo heroesService

y tendria a disposicion todos los metodos y propiedades queel heroes service tenga 


y lo llamamos en el ngOninit
y para que se dispares le agregamos el suscribe a la respuesta del mismo

y obtengo los 20 heroes

__________

CREAR LA INTERFAZ HEROE

con esta pagina nos genera la clase de manera facil para hacer la interfaz

app.quicktype.io

se tiene que crear la interfaz porque type scritp no tiene manera de saber de que tipo es
y al hacerlo tendriamos el tipo del objeto que estamos obteniendo de la promesa y no any

para que se puede levantar el servidor json local hay que estar en la caperta donde esta el archivo

y se ejecuta

json-server --watch db.json

se copia y pega la respuesta

y se eligie del lado derecho en type script y se tilda en interfaz only y en verify json.parse results at runtime

luego copiamos lo que tira y lo pegamos en un archivo llamado heroes.interface.ts
le cambiamos el nombre a la interface y la llamaos Heroe

y como puede ser que en ocacioes no sepamos el id por ejmplo, cuando estemeos creadngo un nuevo heroe no tengamos el id 

lo dejamos en opcional 
id?: string;

y tambien se le agrega un atributi llamado alt_img? opcional del tipo string que va a tener una direccion
url de la imagen por el momento no se realiza la carga de archivos

y se agrega el el service en el metodo get el tipo que se recibie y como aca se obtiene todos
se lo coloca con una lista de tipo Heroe 

se modifica el listado component para utilizar la interfaz

y ya puedo ver los datos del heroe por la interaz

se muestra un listado de los nombres de los heroes a patir de la respuesta get

____________________

MATERIAL CARD - FLEX LAYOUT

en angular material ver el componente CARD

se importa 

import {MatCardModule} from '@angular/material/card';
en el material module  

ya lo tendriamos disponible para cualquier componente que utilice este modulo 

se agrega al htlm el componente mat-divider

salto de linea break line <br>

en la doc esta como implemetar una lista de tarjetas con la info de cada superheroe

al agregar la imagen por url y agregarla la propiedad mat-image, hace que la imagen sea responsive 
y se adapte a la pantalla

luego se agrega la propiedad mat-card-content para mostrar un contenido de la tarjeta 

el strong es para negrita

la propiedad mat-card-actions es un espacio reservado para colocar botones

para modificar el tamaño de las imagenes

usando angular flex , la propiedad fxLayout="row"
le estor diciendo que todo lo que esta en el div se muestre como row y las coloca a todas las card en una sola fila 
pero se salen los bordes

se agrega la propiedad wrap para decirle que si se  completa la imagen salte a la fiquiete fila para mostrarla
pero sigue estando feo

para decirle que tan grande quiero las tarjetas
para este caso que ocupe un 20 % DEL 100 QUE TENEMOS DISPONIBLE DE LA PANTALLA EN EL NAVEGADOR

______________________________

FLEX LAYOUT - DIFERENTES RESOLUCIONES

primera solucion es agregar el ngfor en el dif flex

entonces si le agrego en el fxFlex 50, mostraria 2 , si le agrego 30 mostraria 3 pero
quedaria un espacio sin usar y se ve feo 

al agregar la propiedad fxLayoutAlign para centrar por ejemplo las div hijas
se veria centrado todas 

para agregar un separacion
se usa la propiedad fxLayoutGap = "20px"

y para agregar un margin
lo hace en el compoentn ts listado 
en styles 
un margin top de 20 px
para una separacion de arriba y abajo

y puedo controlar la cantidad de imagenes que se ven 
con la propiedad flex para pantalla grandes que tomen un 15 porciento de la pantalla disponible

ahora cuando la pantalla es muy grande se ve bien
pero ahora cuando la pantalla es muy pequeña
se puede controlar para usar un 30 % para mostrat imagenes cuando la pantalla es pequeña
y dejar por defecto que se use un 20 % para mostrar 

pero se sigue viendo mal cuando la pantalla es muy pequeña
se podria usar la propiedad fxLayout.xs="column para el div de row 
para cuando la pantalla es demasiada pequeña se mira solo una columna

____________

TARJETA HEROTARJETACOMPONENT

se crea ese componente y se coloca ahi todo lo realcionado al mat-card

se pega todo el mat-card en el html heroe-tarjet.component

y se agrega a su ts la propiedad heroe con @Input
le agrego el signo de admiracion a la propiedad para indicar a typescript que siempre va a tener un heroe
heroe!

o sino indicar que puede ser Heroe | undefined

y en el listado components.html

se agrega la llamada al componente pasandole el input

en el recorrido le pasa como parametro cada uno de los heoroes por vez a nuevo componente tarjeta
<app-heroe-tarjeta [heroe]="heroe"><app-heroe-tarjeta >
con el [heroe] le indico el valor que toma esa propiedad 

______________

PIPEIMAGEN
para que un pipe que reciba un objeto se encargue de actualizar la imagen en tiempo real

el pipe lo que deberia hacer, es recibir el heroe y al llamar imagen devolver la ruta de la imagen
el src

y tiene que estar en la carpeta pipe , porque en heroes/pipes estan todos los pipes relacionados a heroes

se debe utilizar como "heroe | imagen"

ng g pipe heroes/pipes/imagen

y en la tarjeta heoroe
se llama ahora a la imagen como <img mat-card-image [src] = "heroe | imagen">

y con el pipe tiene que retornar la path de la imagen

`assets/heroes/${heroe.id}.jpg`

la funcion tranforma solo recibie al obj heroe y devuelve el string con la path

__________________

ruta heroe y editar heroe

la idea es que con el boton editar muestre los datos del heroe para editar y la de consultar al heroe
con el leer mas
usando la ruta del routing heroes-routing.module

http://localhost:4200/heroes/editar/dc-batman

{
        path: 'editar/:id',
        component: AgregarComponent,
      },



http://localhost:4200/heroes/dc-batman

path: ':id',
component: HeroeComponent

es armar la ruta con la que voy a acceder en el navegador miro como quedaria ahi 

ahora del lado del heroe component necesito inyetar algo para poder leerlo
al obj heroe enviado

se inyecta el activateRoute

y en l ngOninit se lo llama y se aplica el parms y el suscribe porque es un observable y la url puede
cambiar

y se usa desestructuracin para mostrar solo el id


__________________________

PANTALLA DE HEROE

para el caso de la url ../heroes/dc-batman

para que muestre los datos correspondiente y valida cuando se ingresa otros valores en la url
se va a utilizar el componente grid de material 
lo utilzia para para centrar las cosas

el componente listado tambien se va a utilizar y el spiner para la espera de la carga

Progress spinner

recomendado utilizar el infinito indeterminate poque no se saba cuanto va a tardar la carga
importar el componente spinner en el material module y se lo exporta para que lo usen lo demas modulos de la app

y el de grilla tambien

se los va a utilizar en el componente de heroe ts

mat-grid-list
por defecto se usa la cantidad de columnas por defecto

y va a aparecer centrado

y se agrega el componente spinner 
mat-spinner


cuando el spinner tenga la solucion
se deberia mostrar el contenido

se agrega un ngif en el grid lista para que se muestre el spiner en caso que el hero no exista !heroe
y en caso contrario se muestra el div correspondien divHeroe

se crea un ng-template con la referencia #divHeroe

al crear la propiedad heroe en el ts hay que crearlo sin valor
pero hay que ponerle el ! para que type script no deje

y hay que hacer un metodo en el service 
getHeroePorId que devuelva un observable para hacer la consulta

en el metodo getHeroePorId para que se pase como parametro el valor id y se arme la url
se hace con ``

en el lado del componente heroe ts
hay que aplicar el metodo switchMap de rxjs/operators de pipe al observable anterior  
luego se desestructura los params y se obtiene el id
y luego se llama al metodo getHeroePorId
y se suscribe para obtener el heroe
y el heroe que recibo va a ser igual al this.heroe de la propiedad

y el heroe en el lado del html se le aplica el pipe json
y deberia verse la info del heroe

listo

al presionar en leer mas , redirige a la pantalla del hereo en la url indicada el id 
y se muestra el spinner y cuando se disponga de los datos del heroe por id se muestra los datos

_________________

DISEÑO PANTALLA HEROE

tengo que trabajr en el ng-template porque ya tengo la informacion ahi
y se muestra cuando tengo al info

se crea un div fxLaout en una sola fila

si la pantalla es muy pequeña se utiliza para mostrar la info en forma de columna

para hacer una separacion de la columnas de 30px fxLayoutGap

y las columnas que se van a mostrar en los div hay que agregarle el fxflex de la cantidad que 
va a copar de la pantalla disponible

en el primero se muestra entre h1 el superhero, alter_ego
se agrega un componente mat-divider
y la imgane usando el pipe para la imagen, si no se hubiera hecho el pipe imagen se tendria que 
volver a hacer la logica para armar la url de la imagen

en el h1 se usa el small para mostrar un texto mas pequeño 

en el segundo div se agrega la otra informacion que se quiera mostrar

y para hacer el resposive de la iamgen
lo agrega en el styles para la imagenes solo del componente 
y hace que ocupe el tañaño completo disponivle pero del div creado 

y tambien para que tenga los bordes redondeados


para el boton regresar 
se inyecta el Router

se define el metodo regresar
para la navegacion e ir a la url heroes/listado

para que se vea bien la separacion de las tarjetas
en el css de del componente heroe tarjeta se define la clase para mostrar

_________________

VARIABLES DE ENTORNO

para que la parte de la url comun 
se defina de forma facil y sea mas facil desplegarlo despues porque no va a ser localhost

en lso archivos
enviroment.prod.ts 
y enviroment.ts

podemos definir variables para que esten disponibles en produccion y desarrollo respectivamente

en el main.ts

pregunta si el enviroment.produccion es true
ejecuta la funcion enableProdMode que limpia varias cosas del build de la aplicacion

eso ya hace angular internamente cuando genera ese build

entonces se agrega en enviroment.ts para desarrollo 
la variable baseUrl con el valor de la url base
'http://localhost:3000'

y en le de prod iria la que quedaria para prod ya no seria localhost
base url en produccion

en el service se llama a la variable base url del enviroments

ver de cual lo trae, cuando se importa si el del de produccion hay que ver que lo traiga de .prod

 return this.http.get<Heroe[]>(`${ this.baseUrl }/heroes`)

con back tick para armar el string template

ahora si necesitamos cambiar la url base
directamente se tiene que cambiar en los enviroments.ts
bajar el servidor y volver a levantar

__________________________


AUTOCOMPLETE ANGULAR MATERIAL

en los ejemplos de la doc se ve que se necesitan mas cosas importar que no estan explicitos 
por ejemplo

el mat-form-filed
el mat-input para establecer los campos del input para que le extienda las configuraciones de estilos

la linea [formControl] = "myControl" es propio de los formularios reactivos de angular
falta ver los formCOntrol

importar el angular autocomplete

en la doc hay que importar el mat-form-field

import {MatFormFieldModule} from '@angular/material/form-filed'

y hay que exportarlo

tambien hay que importar el material input

import {MatInputModule} from '@angular/material/input'

en el div para mostrar el contenido fxLayout en formato columna
y puede ser tambien para mostrar en formato row

se usa el mat-divider

se borro lo de formularios reactivos

en heroes module se agrega FormsModule, se lo importa
y en el buscador se agrega ngModel pero con la caja de banana
[(ngModel)] 

se agrega la propiedad termino 
y otra propiedad para la lista de heroes de tipo heroe
que van a ser lo heores que se van a estar mostrando
esos heroes son los que se van a mostrar en el ngfor de mat-option

en el option
es el objeto que se va a mostrar 
como heroe.id para seleccionarlo , pero tambien se podria mandar como valor todo el objeto
y todas las propiedades

se puede ver el contenido de la propiedad termino al escribir en el buscador
{{termino}}

para obtener lo que se escribe ne la caja de texto
se agrega en el input 
(input)="buscando()"
hay que definir ese metodo al argumento no hace falta mandarle el termino porque ya lo tengo 

y en el buscador ts se agrega en el constructor el servicio

y en el metodo buscando
se llama a todos los heroes con el getHeroes
y en el suscribe se recive lo pedido en heroes
y se le dice que a la propiedad heroes del componente se le asinge los heroes
recibidos

por lo que en el buscador al escribir, se dispara el buscando y se carga el listado de con todos 
los heroes
y luego en el mat-complete se muestran esos heroes de la lsita cargada

y si selecciono uno 
me muestra [object Object] porque es la presentacion de un objeto, es lo mismo que pasa cuando se 
hace objeto.tostring

______________

AUTOCOMPLETE SEGUNDA PARTE

CUANDO SE SELECCIONA HAY QUE HACER OTRA PETICION PARA TRAER LA INFORMACION CORRESPONDIENTE

en postman
puedo hacer query para pedir algo determinado
por ejemplo para hacer la sujerencia del buscador agregando el ?
y postman lo toma como query

http://localhost:3000/heroes?q=a y para limitar la cantidad que regrese le puede agregar una bandera
con &

http://localhost:3000/heroes?q=a&_limit=6

se agrega un nuevo metodo para las sugerencias en el heroes service

getSugerencia
termino de busqueda es lo que la persona esta busqueda
va a ser un arreglo que emite un arreglo de heroes

ahora en el buscador ya no es el endpoint que tengo que llamar ahora es el metodo de sugerencia

si coloco una b trae flas tambien porque en los datos que puede tener el obj flas hay alguno que contiene una b
por eso pero si se escribe mas letras si hace el filtrado,

ahora hay que saber cual heroe fue el seleccionado

el mat-autocomplete tiene varios eventos
entre parentesis significa que emite un evento y se usa el metodo para la opcion seleccionada
y se le agrega un metodo opcionseleccionada que hay que definir en el buscar ts y se le pasa el event
como parametro

y para que en el metodo se pueda poner el tipado de lo que se pasa como parametro a este nuevo metodo
se puede poner any y un console, y luego al ejecutarlo muestra lo que esta llegando 
y de ahi se puede sacar el tipo en caso que se queira ponerlo

y se tiene que importar MatAutocompleteSelectedEvent 

se extrae lo de evnt en el metodo opcionSeleccionada
const heroe = event.option.value

pero si dejo el cursor encima de option se ve que es de tipo any
porque este tipo deevento no sabe que tipo de info es la que esta dentro

asi que podemos decirle que es de tipo heroe

y al hacele el console se puede ver toda la info del heroe seleccionado

y al termino si le asigno el heroe seleccionado lo muestra en el buscador

luego lo que se hace es crear una propiedad heore seleccionado para obtener
los datos mediante peticion http y se le pone ! para que type script permita 
dejarlo vacio

y se llama el getHeroePorId

en el argumento del metodo se puede poner heroe.id!
por las dudas type script se queje porque no esta asignado previamente
asi que se agrega un ! para indicar que va haber un valor siempre

y se lo muestra al obj en formator json en otro div

lo que se muestra es de otra peticion getSeleccionado no del obj seleccionado

_____________________

AUTOCOMPLE CUANDO NO SE ENCONTRO NADA

para que se expanda todo lo posible fxLayout="column" el buscador 


para cuando no se encuentra un valor en el buscador y para mostrar el mensaje
no se encontro nada con el termino {{termino}}

y mandamos un valor "" para devolver
y tambien se debe agregar *ngIf para controlar cuando se va a ver el mensaje por que 
sino siempre va a salir 
cuando el arreglo tengo loguitud cero se va a mostrar este mensaje

en el metodo buscador se agrega el metodo trim para sacar los espacios en blanco

pero si seleccionamos algo que no encuentra se rompe, hay que controlar ese valor 

se puede ver que cuando no se seleccionada y se muestra el mensaje se puede  ver con el console
que se envia un string vacio

y con eso se agrega un if para retornar y no seguir con la ejecucion del metodo 
buscando

queda el problema que si le hago click y no se escribio nada , se muestra el mensaje que no se 
encontro nada, para solucionar eso se agrega otra condicon en el ngif, que el  termino.length sea
mayor a cero

se agrega tambien que cuando el buscador no tenga nada seleccionado, no se muestre el contenido
de la busqueda anterior
y como se le va a setear el undefinid en caso que no haya nada 
en la definicion del heroe seleccionado se le dice que puede ser undefinid

seria cuando selecciono y lo borro y escribo otracosa que no existe
queda en undenifdo entonces se borra el contenido

y luego para que muestre la info de la tarjeta usando el el componente heroe tarjeta

________________________

RESUMEN DE LA SECCION

angular material trabaja de la misma forma que con la que trabajamos con prime ng
son varios modulos pero solo tomamos los que vamos a utilizar en la aplicacion
se creo un modulo material donde se fue agregando cada modulo que se iba necesittando
de angular materia, hay muchos pero es bastante eficiente, porque angualar no vuelve
a cargar los modulos que ya estan cargados en memoria 
ademas por ejemplo si no usamos el modulo de datepicker de material porque lo vamos a cargar
los modulos ademas tienen otros modulos que angular maneja de forma automatica por nosotros

por ejemplo el form filed y el input tienen modulos en comun pero como angular material tambien
esta basado en modulos, entonces si se cargo un modulo de formfield que es el mismo de input
entonces no lo vuelve a cargar 

este modulo materia creado podria no estar y meter todos los modulos de material en el modulo
de heroes pero eso haria que ese modulo cresca mucho o tambien de manera global en app module
pero tambien creceria mucho
por eso es mejor trabajar en moduelos
ademas de esta forma permite trabajar usando lazy load , cargando los modulos adicionales
de la aplicacion